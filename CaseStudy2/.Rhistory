sapply(x[ , 2:3],
function(x) mean(x[1:k])))
estXY = do.call("rbind", estXY)
return(estXY)
}
# here is where we drop a macid's.
# First we will drop the original MAC id subMac[2] that Nolan Dropped and run the analysis
# Next we drop the subMac[1] and see if it got any better results.
# And finally we keep both subMac's and see what our results give us.
# SubMac[1] = "00:0f:a3:39:e1:c0"
# SubMac[2] = "00:0f:a3:39:dd:cd"
#Dropping "00:0f:a3:39:e1:c0"
offlineSummary = subset(orig_offlineSummary, mac != subMacs[1]) #Code change
# Look at the access points Correlating signal strength and distance.
# Entire reason we're clustering on signal strength because there is a direct correlation
AP = matrix( c( 7.5, 6.3, 2.5, -.8, 12.8, -2.8,
1, 14, 33.5, 9.3,  33.5, 2.8),
ncol = 2, byrow = TRUE,
dimnames = list(subMacs[-1], c("x", "y") ))  #Code Change
AP
diffs = offlineSummary[ , c("posX", "posY")] -
AP[ offlineSummary$mac, ]
offlineSummary$dist = sqrt(diffs[ , 1]^2 + diffs[ , 2]^2)
xyplot(signal ~ dist | factor(mac) + factor(angle),
data = offlineSummary, pch = 19, cex = 0.3,
xlab ="distance")
# tally signal strength
macs = unique(offlineSummary$mac)
online = readData("./Data/online.final.trace.txt", subMacs = macs)
online$posXY = paste(online$posX, online$posY, sep = "-")
length(unique(online$posXY))
tabonlineXYA = table(online$posXY, online$angle)
tabonlineXYA[1:col, ]   #Code Change
# tally signal strength
macs = unique(offlineSummary$mac)
online = readData("./Data/online.final.trace.txt", subMacs = macs)
online$posXY = paste(online$posX, online$posY, sep = "-")
length(unique(online$posXY))
tabonlineXYA = table(online$posXY, online$angle)
tabonlineXYA[1:6, ]
keepVars = c("posXY", "posX","posY", "orientation", "angle")
byLoc = with(online,
by(online, list(posXY),
function(x) {
ans = x[1, keepVars]
avgSS = tapply(x$signal, x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = col,  #code Change
dimnames = list(ans$posXY, names(avgSS)))
cbind(ans, y)
}))
# tally signal strength
macs = unique(offlineSummary$mac)
online = readData("./Data/online.final.trace.txt", subMacs = macs)
online$posXY = paste(online$posX, online$posY, sep = "-")
length(unique(online$posXY))
tabonlineXYA = table(online$posXY, online$angle)
tabonlineXYA[1:6, ]
keepVars = c("posXY", "posX","posY", "orientation", "angle")
byLoc = with(online,
by(online, list(posXY),
function(x) {
ans = x[1, keepVars]
avgSS = tapply(x$signal, x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY, names(avgSS)))
cbind(ans, y)
}))
onlineSummary = do.call("rbind", byLoc)
# create data frame and functions to aggregate/select data with similar angles
# dim(onlineSummary)
#
# names(onlineSummary)
m = 3; angleNewObs = 230
refs = seq(0, by = 45, length  = 8)
nearestAngle = roundOrientation(angleNewObs)
if (m %% 2 == 1) {
angles = seq(-45 * (m - 1) /2, 45 * (m - 1) /2, length = m)
} else {
m = m + 1
angles = seq(-45 * (m - 1) /2, 45 * (m - 1) /2, length = m)
if (sign(angleNewObs - nearestAngle) > -1)
angles = angles[ -1 ]
else
angles = angles[ -m ]
}
angles = angles + nearestAngle
angles[angles < 0] = angles[ angles < 0 ] + 360
angles[angles > 360] = angles[ angles > 360 ] - 360
offlineSubset =
offlineSummary[ offlineSummary$angle %in% angles, ]
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY")) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
# Here is where we determine the distance by signal strength.  It is created by differences in the signal strength. Then we cluster on that distance (or strength as it were)
trainSS = reshapeSS(offlineSubset, varSignal = "avgSignal")
selectTrain = function(angleNewObs, signals = NULL, m = 1){
# m is the number of angles to keep between 1 and 5
refs = seq(0, by = 45, length  = 8)
nearestAngle = roundOrientation(angleNewObs)
if (m %% 2 == 1)
angles = seq(-45 * (m - 1) /2, 45 * (m - 1) /2, length = m)
else {
m = m + 1
angles = seq(-45 * (m - 1) /2, 45 * (m - 1) /2, length = m)
if (sign(angleNewObs - nearestAngle) > -1)
angles = angles[ -1 ]
else
angles = angles[ -m ]
}
angles = angles + nearestAngle
angles[angles < 0] = angles[ angles < 0 ] + 360
angles[angles > 360] = angles[ angles > 360 ] - 360
angles = sort(angles)
offlineSubset = signals[ signals$angle %in% angles, ]
reshapeSS(offlineSubset, varSignal = "avgSignal")
}
train130 = selectTrain(130, offlineSummary, m = 3)
head(train130)
length(train130[[1]])
# here is our NN function.
# Change this section to also add the weighted distance to the Nearest neighbor function
# We can calculate this weight by taking 1/the closest ordered points in the cluster
findNN = function(newSignal, trainSubset) {
diffs = apply(trainSubset[ , 4:9], 1,
function(x) x - newSignal)
dists = apply(diffs, 2, function(x) sqrt(sum(x^2)) )
closest = order(dists)
weightDF = trainSubset[closest, 1:3 ]     #CodeChange
weightDF$weight = 1/closest               #Codechange
return(weightDF)
}
# predict X-Y based on the the neasest k neighbors (default 3)
# here is what calculates our weights so we'll modify this to accept the weights.
NNeighbors = 3
predXY = function(newSignals, newAngles, trainData,
numAngles = 1, k = NNeighbors){  #CodeChange
closeXY = list(length = nrow(newSignals))
for (i in 1:nrow(newSignals)) {
trainSS = selectTrain(newAngles[i], trainData, m = numAngles)
closeXY[[i]] =
findNN(newSignal = as.numeric(newSignals[i, ]), trainSS)
}
#Modify below code for weighting further into analysis (last comparison)
estXY = lapply(closeXY,
function(x) sapply(x[ , 2:3],
function(x) mean(x[1:k])))
estXY = do.call("rbind", estXY)
return(estXY)
}
# nearest 3 neighbors
estXYk3 = predXY(newSignals = onlineSummary[ , 6:11],
newAngles = onlineSummary[ , 4],
offlineSummary, numAngles = 3, k = NNeighbors)
# nearest neighbor
estXYk1 = predXY(newSignals = onlineSummary[ , 6:11],
newAngles = onlineSummary[ , 4],
offlineSummary, numAngles = 3, k = 1)
# predict and map errors
floorErrorMap = function(estXY, actualXY, trainPoints = NULL, AP = NULL){
plot(0, 0, xlim = c(0, 35), ylim = c(-3, 15), type = "n",
xlab = "", ylab = "", axes = FALSE,
main = "Floor Map of Predictions",                      #CodeChange
sub = "■ = Access Point, ● = Actual, ✷ = Predicted")   #CodeChange
box()
if ( !is.null(AP) ) points(AP, pch = 15)
if ( !is.null(trainPoints) )
points(trainPoints, pch = 19, col="grey", cex = 0.6)
points(x = actualXY[, 1], y = actualXY[, 2],
pch = 19, cex = 0.8 )
points(x = estXY[, 1], y = estXY[, 2],
pch = 8, cex = 0.8 )
segments(x0 = estXY[, 1], y0 = estXY[, 2],
x1 = actualXY[, 1], y1 = actualXY[ , 2],
lwd = 2, col = "red")
}
trainPoints = offlineSummary[ offlineSummary$angle == 0 &
offlineSummary$mac == "00:0f:a3:39:dd:cd" , #CodeChange
c("posX", "posY")]
# 3 NN
floorErrorMap(estXYk3, onlineSummary[ , c("posX","posY")],
trainPoints = trainPoints, AP = AP)
# 1 NN
floorErrorMap(estXYk1, onlineSummary[ , c("posX","posY")],
trainPoints = trainPoints, AP = AP)
calcError <- function(estXY, actualXY) sum( rowSums( (estXY - actualXY)^2) )
actualXY = onlineSummary[ , c("posX", "posY")]
sapply(list(estXYk1, estXYk3), calcError, actualXY)
#change this to 3 for faster runs.  Orig 11
v = 11
permuteLocs = sample(unique(offlineSummary$posXY))
permuteLocs = matrix(permuteLocs, ncol = v,
nrow = floor(length(permuteLocs)/v))
onlineFold = subset(offlineSummary, posXY %in% permuteLocs[ , 1])
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY"),
sampleAngle = FALSE,
refs = seq(0, 315, by = 45)) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
if (sampleAngle) {
x = x[x$angle == sample(refs, size = 1), ]}
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = 6,
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
# up to 20 neighbors, 11 folds
# this one can run for a while (5-10 mins)
# this cell and the next are the same, but the angles change slightly!!
offline = offline[ offline$mac != "00:0f:a3:39:e1:c0", ]   #CodeChange
keepVars = c("posXY", "posX","posY", "orientation", "angle")
onlineCVSummary = reshapeSS(offline, keepVars = keepVars,
sampleAngle = TRUE)
unique(offline$mac)
# here is where we drop a macid's.
# First we will drop the original MAC id subMac[2] that Nolan Dropped and run the analysis
# Next we drop the subMac[1] and see if it got any better results.
# And finally we keep both subMac's and see what our results give us.
# SubMac[1] = "00:0f:a3:39:e1:c0"
# SubMac[2] = "00:0f:a3:39:dd:cd"
#Dropping "00:0f:a3:39:e1:c0"
offlineSummary = subset(orig_offlineSummary, mac != subMacs[1]) #Code change
# Look at the access points Correlating signal strength and distance.
# Entire reason we're clustering on signal strength because there is a direct correlation
AP = matrix( c( 7.5, 6.3, 2.5, -.8, 12.8, -2.8,
1, 14, 33.5, 9.3,  33.5, 2.8),
ncol = 2, byrow = TRUE,
dimnames = list(subMacs[-2], c("x", "y") ))  #Code Change
AP
diffs = offlineSummary[ , c("posX", "posY")] -
AP[ offlineSummary$mac, ]
offlineSummary$dist = sqrt(diffs[ , 1]^2 + diffs[ , 2]^2)
xyplot(signal ~ dist | factor(mac) + factor(angle),
data = offlineSummary, pch = 19, cex = 0.3,
xlab ="distance")
# Chunk 1: setup
knitr::opts_chunk$set(warning = F, message = F, dev = "svg", fig.align = "center")
knitr::opts_chunk$set(tidy = T)
knitr::opts_chunk$set(comment = '#>')
options(digits = 2)
# Chunk 2
knitr::include_graphics("CleverZonkedElk.png")
set.seed(123456)
# Chunk 3: tableguy
pander::pander(
list(
t = "Time stamp (Milliseconds) since 12:00am, January 1, 1970",
Id = "router MAC address",
Pos = "Router location",
Degree = "Direction scanning device was carried by the researcher, measured in Degrees",
MAC = "MAC address of either the accessrouter, or scanning device combined with corresponding values for signal strength (dBm), the mode in which it was operating(adhoc scanner = 1, access router = 3), and its corresponding channel frequency."
,
Signal = "Received Signal Strength in DbM")
)
# Chunk 4: util_chonk
knitr::read_chunk("utils.R")
knitr::opts_chunk$set(warning = F, message = F, dev = "svg", fig.align = "center")
knitr::opts_chunk$set(tidy = T)
knitr::opts_chunk$set(comment = '#>')
options(digits = 2)
knitr::include_graphics("CleverZonkedElk.png")
set.seed(123456)
pander::pander(
list(
t = "Time stamp (Milliseconds) since 12:00am, January 1, 1970",
Id = "router MAC address",
Pos = "Router location",
Degree = "Direction scanning device was carried by the researcher, measured in Degrees",
MAC = "MAC address of either the accessrouter, or scanning device combined with corresponding values for signal strength (dBm), the mode in which it was operating(adhoc scanner = 1, access router = 3), and its corresponding channel frequency."
,
Signal = "Received Signal Strength in DbM")
)
knitr::read_chunk("utils.R")
getwd()
setwd('C:\githubrepo\7333_QTW\CaseStudy2\christmas')
setwd('C:/githubrepo/7333_QTW/CaseStudy2/christmas')
# Chunk 1: setup
knitr::opts_chunk$set(warning = F, message = F, dev = "svg", fig.align = "center")
knitr::opts_chunk$set(tidy = T)
knitr::opts_chunk$set(comment = '#>')
options(digits = 2)
# Chunk 2
knitr::include_graphics("CleverZonkedElk.png")
set.seed(123456)
# Chunk 3: tableguy
pander::pander(
list(
t = "Time stamp (Milliseconds) since 12:00am, January 1, 1970",
Id = "router MAC address",
Pos = "Router location",
Degree = "Direction scanning device was carried by the researcher, measured in Degrees",
MAC = "MAC address of either the accessrouter, or scanning device combined with corresponding values for signal strength (dBm), the mode in which it was operating(adhoc scanner = 1, access router = 3), and its corresponding channel frequency."
,
Signal = "Received Signal Strength in DbM")
)
# Chunk 4: util_chonk
knitr::read_chunk("utils.R")
knitr::read_chunk("analysis_plots.R")
knitr::read_chunk("excl_b.R")
<<processline>>
<<roundO>>
<<readData>>
<<offline_read>>
getwd()
# Chunk 1: setup
knitr::opts_chunk$set(warning = F, message = F, dev = "svg", fig.align = "center")
knitr::opts_chunk$set(tidy = T)
knitr::opts_chunk$set(comment = '#>')
options(digits = 2)
# Chunk 2
knitr::include_graphics("CleverZonkedElk.png")
set.seed(123456)
# Chunk 3: tableguy
pander::pander(
list(
t = "Time stamp (Milliseconds) since 12:00am, January 1, 1970",
Id = "router MAC address",
Pos = "Router location",
Degree = "Direction scanning device was carried by the researcher, measured in Degrees",
MAC = "MAC address of either the accessrouter, or scanning device combined with corresponding values for signal strength (dBm), the mode in which it was operating(adhoc scanner = 1, access router = 3), and its corresponding channel frequency."
,
Signal = "Received Signal Strength in DbM")
)
# Chunk 4: util_chonk
knitr::read_chunk("utils.R")
knitr::read_chunk("analysis_plots.R")
knitr::read_chunk("excl_b.R")
# Chunk 5: ok
<<processline>>
<<roundO>>
<<readData>>
<<offline_read>>
offline
# Chunk 1: setup
knitr::opts_chunk$set(warning = F, message = F, dev = "svg", fig.align = "center")
knitr::opts_chunk$set(tidy = T)
knitr::opts_chunk$set(comment = '#>')
options(digits = 2)
# Chunk 2
knitr::include_graphics("CleverZonkedElk.png")
set.seed(123456)
# Chunk 3: tableguy
pander::pander(
list(
t = "Time stamp (Milliseconds) since 12:00am, January 1, 1970",
Id = "router MAC address",
Pos = "Router location",
Degree = "Direction scanning device was carried by the researcher, measured in Degrees",
MAC = "MAC address of either the accessrouter, or scanning device combined with corresponding values for signal strength (dBm), the mode in which it was operating(adhoc scanner = 1, access router = 3), and its corresponding channel frequency."
,
Signal = "Received Signal Strength in DbM")
)
# Chunk 4: util_chonk
knitr::read_chunk("utils.R")
knitr::read_chunk("analysis_plots.R")
knitr::read_chunk("excl_b.R")
# Chunk 5: ok
<<processline>>
<<roundO>>
<<readData>>
<<offline_read>>
# Chunk 6
offline
# Chunk 7: plotutil
# Chunk 8: all_box
# Chunk 9: box2
# Chunk 10: pivot0
# Chunk 11: all_dens
# Chunk 12: two_dens
setwd('C:/Users/andyh/Google Drive/Education/SMU/Courses/DS_7333_QTW/Case_Studies/CaseStudy2/christmas')
getwd()
# Chunk 1: setup
knitr::opts_chunk$set(warning = F, message = F, dev = "svg", fig.align = "center")
knitr::opts_chunk$set(tidy = T)
knitr::opts_chunk$set(comment = '#>')
options(digits = 2)
# Chunk 2
knitr::include_graphics("CleverZonkedElk.png")
set.seed(123456)
# Chunk 3: tableguy
pander::pander(
list(
t = "Time stamp (Milliseconds) since 12:00am, January 1, 1970",
Id = "router MAC address",
Pos = "Router location",
Degree = "Direction scanning device was carried by the researcher, measured in Degrees",
MAC = "MAC address of either the accessrouter, or scanning device combined with corresponding values for signal strength (dBm), the mode in which it was operating(adhoc scanner = 1, access router = 3), and its corresponding channel frequency."
,
Signal = "Received Signal Strength in DbM")
)
# Chunk 4: util_chonk
knitr::read_chunk("utils.R")
knitr::read_chunk("analysis_plots.R")
knitr::read_chunk("excl_b.R")
<<processline>>
<<roundO>>
<<readData>>
<<offline_read>>
# Chunk 1: setup
knitr::opts_chunk$set(warning = F, message = F, dev = "svg", fig.align = "center")
knitr::opts_chunk$set(tidy = T)
knitr::opts_chunk$set(comment = '#>')
options(digits = 2)
# Chunk 2
knitr::include_graphics("CleverZonkedElk.png")
set.seed(123456)
# Chunk 3: tableguy
pander::pander(
list(
t = "Time stamp (Milliseconds) since 12:00am, January 1, 1970",
Id = "router MAC address",
Pos = "Router location",
Degree = "Direction scanning device was carried by the researcher, measured in Degrees",
MAC = "MAC address of either the accessrouter, or scanning device combined with corresponding values for signal strength (dBm), the mode in which it was operating(adhoc scanner = 1, access router = 3), and its corresponding channel frequency."
,
Signal = "Received Signal Strength in DbM")
)
# Chunk 4: util_chonk
knitr::read_chunk("utils.R")
knitr::read_chunk("analysis_plots.R")
knitr::read_chunk("excl_b.R")
<<processline>>
<<roundO>>
<<readData>>
<<offline_read>>
packageVersion("knitr")
source('utils.R')
<<processline>>
<<roundO>>
<<readData>>
<<offline_read>>
offline
offline <- readData("offline.final.trace.txt")
# fix up the xypos
offline$posXY <-  paste(offline$posX, offline$posY, sep = "-")
byLocAngleAP = with(offline,
by(offline, list(posXY, angle, mac),
function(x) x))
signalSummary =
lapply(byLocAngleAP,
function(oneLoc) {
ans = oneLoc[1, ]
ans$medSignal = median(oneLoc$signal)
ans$avgSignal = mean(oneLoc$signal)
ans$num = length(oneLoc$signal)
ans$sdSignal = sd(oneLoc$signal)
ans$iqrSignal = IQR(oneLoc$signal)
ans
})
offlineSummary_original = do.call("rbind", signalSummary)
offlineSummary <- offlineSummary_original %>% filter(mac != router_a)
kids = load(url("http://www.users.muohio.edu/hughesmr/sta333/respiratory.RData"))
source('C:/Users/andyh/Google Drive/Education/SMU/Courses/DS_7333_QTW/Unit_2/LOESS.R', echo=TRUE)
source('C:/Users/andyh/Google Drive/Education/SMU/Courses/DS_7333_QTW/Unit_2/LOESS.R', echo=TRUE)
kids = load(url("http://www.users.muohio.edu/hughesmr/sta333/respiratory.RData"))
kids$index <- 1:618
kids$index <- [1:618]
kids$index <- [1:nrow(kids)]
kids$index <- 1:nrow(kids)
summary(kids)
head(kids)
kids = read.table(load(url("http://www.users.muohio.edu/hughesmr/sta333/respiratory.RData")))
kids = load(url("http://www.users.muohio.edu/hughesmr/sta333/respiratory.RData"))
kids$index <- 1:nrow(kids)
nrow(kids)
kids = load.Rdata(kids)
kids = respiratory
kids$index <- 1:nrow(kids)
loess_10 <- loess(rate ~ index, data=kids, span=0.10)
loess_25 <- loess(rate ~ index, data=kids, span=0.25)
loess_50 <- loess(rate ~ index, data=kids, span=0.50)
plot(kids$rate, x=kids$age, type="l",
main="Loess Smoothing and Prediction",
xlab="Age",
ylab="Respitory Rate")
lines(loess_10, x=kids$age, col="red")
lines(loess_25, x=kids$age, col="green")
lines(loess_50, x=kids$age, col="blue")
# Plot it
plot(kids$rate, x=kids$age, type="l",
main="Loess Smoothing and Prediction",
xlab="Age",
ylab="Respitory Rate")
lines(loess_10, x=kids$age, col="red")
lines(loess_25, x=kids$age, col="green")
lines(loess_50, x=kids$age, col="blue")
source('C:/Users/andyh/Google Drive/Education/SMU/Courses/DS_7333_QTW/Unit_2/LOESS.R', echo=TRUE)
source('C:/Users/andyh/Google Drive/Education/SMU/Courses/DS_7333_QTW/Unit_2/LOESS.R', echo=TRUE)
source('C:/Users/andyh/Google Drive/Education/SMU/Courses/DS_7333_QTW/Unit_2/LOESS.R', echo=TRUE)
source('C:/Users/andyh/Google Drive/Education/SMU/Courses/DS_7333_QTW/Unit_2/LOESS.R', echo=TRUE)
source('C:/Users/andyh/Google Drive/Education/SMU/Courses/DS_7333_QTW/Unit_2/LOESS.R', echo=TRUE)
source('C:/Users/andyh/Google Drive/Education/SMU/Courses/DS_7333_QTW/Unit_2/LOESS.R', echo=TRUE)
source('C:/Users/andyh/Google Drive/Education/SMU/Courses/DS_7333_QTW/Unit_2/LOESS.R', echo=TRUE)
getwd()
