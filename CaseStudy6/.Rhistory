testSpamidx = sample(is_Spam_ct, size = floor(is_Spam_ct/2))
testHamidx = sample(is_Ham_ct, size = floor(is_Ham_ct/2))
testDF =
rbind( df_process[ df_process$isSpam == "T", ][testSpamIdx, ],
df_process[df_process$isSpam == "F", ][testHamIdx, ] )
trainDF =
rbind( df_process[df_process$isSpam == "T", ][-testSpamIdx, ],
df_process[df_process$isSpam == "F", ][-testHamIdx, ])
testcontrolparam3 <- rpart(isSpam ~., data=trainDF, na.action = na.rpart, method = "class",
control=rpart.control(minsplit = 3, maxdepth=30, minbucket = 2, cp = 0.005))
rpart.plot(testcontrolparam3, extra = 1)
predictions = predict(testcontrolparam3,
newdata = testDF[, names(testDF) != "isSpam"],
type = "class")
predsForHam = predictions[ testDF$isSpam == "F" ]
summary(predsForHam)
sum(predsForHam == "T") / length(predsForHam)
predsForSpam = predictions[ testDF$isSpam == "T" ]
sum(predsForSpam == "F") / length(predsForSpam)
set.seed(54)
testSpamidx = sample(is_Spam_ct, size = floor(is_Spam_ct/2))
testHamidx = sample(is_Ham_ct, size = floor(is_Ham_ct/2))
testDF =
rbind( df_process[ df_process$isSpam == "T", ][testSpamIdx, ],
df_process[df_process$isSpam == "F", ][testHamIdx, ] )
trainDF =
rbind( df_process[df_process$isSpam == "T", ][-testSpamIdx, ],
df_process[df_process$isSpam == "F", ][-testHamIdx, ])
testcontrolparam4 <- rpart(isSpam ~., data=trainDF, na.action = na.rpart, method = "class",
control=rpart.control(minsplit = 3, maxdepth=2, minbucket = 2, cp = 0.005))
rpart.plot(testcontrolparam4, extra = 1)
predictions = predict(testcontrolparam4,
newdata = testDF[, names(testDF) != "isSpam"],
type = "class")
predsForHam = predictions[ testDF$isSpam == "F" ]
summary(predsForHam)
sum(predsForHam == "T") / length(predsForHam)
predsForSpam = predictions[ testDF$isSpam == "T" ]
sum(predsForSpam == "F") / length(predsForSpam)
set.seed(54)
is_Spam_ct <- table(df_process$isSpam)["T"]
is_Ham_ct <- table(df_process$isSpam)["F"]
# we are starting from here,
# the code used to create the RDA will be shown in the appendix,
# it seems to run fine on windows but crash on linux
# so this was a good compromise without digging too deeply into the web of
# lapplys
#emailDFrp <- read.csv("C:/githubrepo/7333_QTW/CaseStudy6/Data/data.csv")
load(./Data/data.rda)
emails <- emailDFrp
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars],
function(x) {
x = as.numeric(x)
})
cbind(facVars, data[ , - logicalVars])
}
emails = setupRnum(emails)
emails[is.na(emails)]<-0
df_process <- emails
# we are starting from here,
# the code used to create the RDA will be shown in the appendix,
# it seems to run fine on windows but crash on linux
# so this was a good compromise without digging too deeply into the web of
# lapplys
#emailDFrp <- read.csv("C:/githubrepo/7333_QTW/CaseStudy6/Data/data.csv")
load(./Data/data.rda)
emails <- emailDFrp
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars],
function(x) {
x = as.numeric(x)
})
cbind(facVars, data[ , - logicalVars])
}
emails = setupRnum(emails)
emails[is.na(emails)]<-0
df_process <- emails
set.seed(54)
#Get a count for spam and ham
is_Spam_ct <- table(df_process$isSpam)["T"]
is_Ham_ct <- table(df_process$isSpam)["F"]
#Sample the indexes
# note createdatapartition is stratified
train_idx <- createDataPartition(df_process$isSpam, p = 0.66, list = F)
spam_train <- df_process[train_idx,]
spam_test <- df_process[-train_idx,]
#Fitting the regression tree.
rpart_fit = rpart(isSpam ~ .,
data = spam_train,
minsplit = 2,
method = "class")
#Plot it with either prp or rpart.plot
#prp(rpart_fit, extra = 106)
rpart.plot(rpart_fit)
#Now lets make some predictions.  We'll predict on the df_test_rpart, with the fit we just achieved directly above.
rp_predict <- predict(rpart_fit,
newdata = spam_test,
type = "class")
confusion_mat <- function(preds, truth) {
return(table(preds,truth))
}
accuracy <- function(preds, truth=spam_test$isSpam) {
cm <- confusion_mat(preds, truth)
sum(diag(cm))/sum(cm)
}
precision <- function(preds, truth=spam_test$isSpam) {
cm <- confusion_mat(preds, truth)
diag(cm) / colSums(cm)
}
recall <- function(preds, truth=spam_test$isSpam) {
cm <- confusion_mat(preds, truth)
diag(cm) / rowSums(cm)
}
f1 <- function(preds, truth=spam_test$isSpam, positive.class = "T") {
precision <- precision(preds, truth)
recall <- recall(preds, truth)
f1 <-  ifelse(precision + recall == 0, 0, 2 * precision * recall / (precision + recall))
#Assuming that F1 is zero when it's not possible compute it
f1[is.na(f1)] <- 0
#Binary F1 or Multi-class macro-averaged F1
ifelse(nlevels(truth) == 2, f1[positive.class], mean(f1))
}
metrics <- list("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1_score" =  f1)
get_metrics <- function(preds, truth = spam_test$isSpam){
unlist(lapply(metrics, function(f) f(preds)))
}
data.frame(t(get_metrics(rp_predict)))
set.seed(54)
is_Spam_ct <- table(df_process$isSpam)["T"]
is_Ham_ct <- table(df_process$isSpam)["F"]
testSpamidx = sample(is_Spam_ct, size = floor(is_Spam_ct/3))
# we are starting from here,
# the code used to create the RDA will be shown in the appendix,
# it seems to run fine on windows but crash on linux
# so this was a good compromise without digging too deeply into the web of
# lapplys
emailDFrp <- read.csv("C:/githubrepo/7333_QTW/CaseStudy6/Data/data.csv")
#load(./Data/data.rda)
emails <- emailDFrp
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars],
function(x) {
x = as.numeric(x)
})
cbind(facVars, data[ , - logicalVars])
}
emails = setupRnum(emails)
emails[is.na(emails)]<-0
df_process <- emails
# we are starting from here,
# the code used to create the RDA will be shown in the appendix,
# it seems to run fine on windows but crash on linux
# so this was a good compromise without digging too deeply into the web of
# lapplys
emailDFrp <- read.csv("C:/githubrepo/7333_QTW/CaseStudy6/Data/data.csv")
#load(./Data/data.rda)
emails <- emailDFrp
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars],
function(x) {
x = as.numeric(x)
})
cbind(facVars, data[ , - logicalVars])
}
emails = setupRnum(emails)
emails[is.na(emails)]<-0
df_process <- emails
set.seed(54)
is_Spam_ct <- table(df_process$isSpam)["T"]
is_Ham_ct <- table(df_process$isSpam)["F"]
# we are starting from here,
# the code used to create the RDA will be shown in the appendix,
# it seems to run fine on windows but crash on linux
# so this was a good compromise without digging too deeply into the web of
# lapplys
emailDFrp <- read.csv("C:/githubrepo/7333_QTW/CaseStudy6/Data/data.csv")
#load(./Data/data.rda)
emails <- emailDFrp
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars],
function(x) {
x = as.factor(x)
})
cbind(facVars, data[ , - logicalVars])
}
emails = setupRnum(emails)
emails[is.na(emails)]<-0
df_process <- emails
set.seed(54)
is_Spam_ct <- table(df_process$isSpam)["T"]
is_Ham_ct <- table(df_process$isSpam)["F"]
# we are starting from here,
# the code used to create the RDA will be shown in the appendix,
# it seems to run fine on windows but crash on linux
# so this was a good compromise without digging too deeply into the web of
# lapplys
emailDFrp <- read.csv("C:/githubrepo/7333_QTW/CaseStudy6/Data/data.csv")
#load(./Data/data.rda)
emails <- emailDFrp
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars],
function(x) {
x = as.factor(x)
})
cbind(facVars, data[ , - logicalVars])
}
emails = setupRnum(emails)
emails[is.na(emails)]<-0
df_process <- emails
set.seed(54)
is_Spam_ct <- table(df_process$isSpam)["T"]
is_Ham_ct <- table(df_process$isSpam)["F"]
# we are starting from here,
# the code used to create the RDA will be shown in the appendix,
# it seems to run fine on windows but crash on linux
# so this was a good compromise without digging too deeply into the web of
# lapplys
emailDFrp <- read.csv("https://raw.githubusercontent.com/Landcruiser87/7333_QTW/master/CaseStudy6/Data/data.csv")
#load(./Data/data.rda)
emails <- emailDFrp
str(emails$isSpam)
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars],
function(x) {
x = as.factor(x)
})
cbind(facVars, data[ , - logicalVars])
}
emails = setupRnum(emails)
emails[is.na(emails)]<-0
df_process <- emails
levels(df_process$isSpam) <- c("F","T")
is_Spam_ct <- table(df_process$isSpam)["T"]
is_Ham_ct <- table(df_process$isSpam)["F"]
is_Ham_ct <- table(df_process$isSpam)["F"]
train_idx <- createDataPartition(df_process$isSpam, p = 0.66, list = F)
spam_train <- df_process[train_idx,]
spam_test <- df_process[-train_idx,]
rpart_fit = rpart(isSpam ~ .,
data = spam_train,
minsplit = 2,
method = "class")
library(rpart)
library(caret)
library(dplyr)
library(rpart.plot)
library(parallel)
library(doParallel)
library(foreach)
library(iterators)
knitr::opts_chunk$set(warning = F, message = F, dev = "svg", fig.align = "center")
knitr::opts_chunk$set(tidy = T)
knitr::opts_chunk$set(comment = '#>')
options(digits = 2)
library(rpart)
library(caret)
library(dplyr)
library(rpart.plot)
# we are starting from here,
# the code used to create the RDA will be shown in the appendix,
# it seems to run fine on windows but crash on linux
# so this was a good compromise without digging too deeply into the web of
# lapplys
emailDFrp <- read.csv("https://raw.githubusercontent.com/Landcruiser87/7333_QTW/master/CaseStudy6/Data/data.csv")
emailDFrp$X <- NULL
str(emails$isSpam)
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars],
function(x) {
x = as.factor(x)
})
cbind(facVars, data[ , - logicalVars])
}
emails = setupRnum(emails)
emails[is.na(emails)]<-0
df_process <- emails
levels(df_process$isSpam) <- c("F","T")
emailDFrp <- read.csv("https://raw.githubusercontent.com/Landcruiser87/7333_QTW/master/CaseStudy6/Data/data.csv")
emailDFrp$X <- NULL
str(emails$isSpam)
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars],
function(x) {
x = as.factor(x)
})
cbind(facVars, data[ , - logicalVars])
}
emails = setupRnum(emails)
unlink('Analysis/Case_study_6_cache', recursive = TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(warning = F, message = F, dev = "svg", fig.align = "center")
knitr::opts_chunk$set(tidy = T)
knitr::opts_chunk$set(comment = '#>')
options(digits = 2)
# Chunk 2: Load_Libraries
library(rpart)
library(caret)
library(dplyr)
library(rpart.plot)
library(parallel)
library(doParallel)
library(foreach)
library(iterators)
# Chunk 3: dataload
# we are starting from here,
# the code used to create the RDA will be shown in the appendix,
# it seems to run fine on windows but crash on linux
# so this was a good compromise without digging too deeply into the web of
# lapplys
emailDFrp <- read.csv("https://raw.githubusercontent.com/Landcruiser87/7333_QTW/master/CaseStudy6/Data/data.csv")
emailDFrp$X <- NULL
#load(./Data/data.rda)
emails <- emailDFrp
str(emails$isSpam)
setupRnum = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars],
function(x) {
x = as.factor(x)
})
cbind(facVars, data[ , - logicalVars])
}
emails = setupRnum(emails)
emails[is.na(emails)]<-0
df_process <- emails
levels(df_process$isSpam) <- c("F","T")
# Chunk 4: metrictable
pander::pander(
list( Accuracy = "Accuracy is defined as the number of correct predictions divided by the total number of predictions.",
list("(True Positive + False Negatives)/Total amount of samples"),
"Precision" = "Precision is defined as the ratio of correctly predicted positives to the total number of predicted positive observations.",
list("True Positives/(True Positives + False Positives)"),
"Recall" = "Recall is defined as the ratio of correct positives to all the observations in the class",
list("True Positives/(True Positives + False Positives"),
"F1-Score" = "F1 score is defined as a weighted average of Precision and Recall. This metric is more useful when you have uneven class balances but it sometimes useful as it includes false postivies and false negatives. ",
list("2x(Recall x Precision)/(Recall + Position)")
))
# Chunk 5: parmtable
pander::pander(
list(
"cp-complexity" ="This parameter is meant to improve computing efficiency in order to avoid uncessary splits if there isn't an increase in R-squared value.",
"minsplit" = "Seeing as a tree is the result of the rpart classification.  The minsplit parameter defintes the number of observations necessary in an a parent node in order to quality that branch to be split.  We chose to 3:1 ratio of minsplit to minbucket.",
"minbucket" = "This parameter controls the lowest number of observations that can exist in an end/terminal node.",
"maxdepth" = "This parameter defines how deep a final tree can be built by limiting the amount of levels of nodes that can be created.  The help files suggest not going too deep in a tree as it will result in overfitting.  Therefore we won't build a tree greater than 30 levels."
))
# Chunk 6
set.seed(54)
#Get a count for spam and ham
is_Spam_ct <- table(df_process$isSpam)["T"]
is_Ham_ct <- table(df_process$isSpam)["F"]
#Sample the indexes
# note createdatapartition is stratified
train_idx <- createDataPartition(df_process$isSpam, p = 0.66, list = F)
spam_train <- df_process[train_idx,]
spam_test <- df_process[-train_idx,]
#Fitting the regression tree.
rpart_fit = rpart(isSpam ~ .,
data = spam_train,
minsplit = 2,
method = "class")
#Plot it with either prp or rpart.plot
#prp(rpart_fit, extra = 106)
rpart.plot(rpart_fit)
#Now lets make some predictions.  We'll predict on the df_test_rpart, with the fit we just achieved directly above.
rp_predict <- predict(rpart_fit,
newdata = spam_test,
type = "class")
confusion_mat <- function(preds, truth) {
return(table(preds,truth))
}
accuracy <- function(preds, truth=spam_test$isSpam) {
cm <- confusion_mat(preds, truth)
sum(diag(cm))/sum(cm)
}
precision <- function(preds, truth=spam_test$isSpam) {
cm <- confusion_mat(preds, truth)
diag(cm) / colSums(cm)
}
recall <- function(preds, truth=spam_test$isSpam) {
cm <- confusion_mat(preds, truth)
diag(cm) / rowSums(cm)
}
f1 <- function(preds, truth=spam_test$isSpam, positive.class = "T") {
precision <- precision(preds, truth)
recall <- recall(preds, truth)
f1 <-  ifelse(precision + recall == 0, 0, 2 * precision * recall / (precision + recall))
#Assuming that F1 is zero when it's not possible compute it
f1[is.na(f1)] <- 0
#Binary F1 or Multi-class macro-averaged F1
ifelse(nlevels(truth) == 2, f1[positive.class], mean(f1))
}
metrics <- list("accuracy" = accuracy, "precision" = precision, "recall" = recall, "f1_score" =  f1)
get_metrics <- function(preds, truth = spam_test$isSpam){
unlist(lapply(metrics, function(f) f(preds)))
}
get_depth <- function(fit) {
nodes <- as.numeric(rownames(fit$frame))
max(rpart:::tree.depth(nodes))
}
get_leaves <- function(fit) {
sum(fit$frame$var=="<leaf>")
}
make_metric_frame <- function(fit, pred) {
out = c(
"leaves" = get_leaves(fit),
"depth" = get_depth(fit),
get_metrics(pred)
)
return(data.frame(t(out)))
}
result_0 <- make_metric_frame(rpart_fit, rp_predict)
result_0
# Chunk 7: paramsearch
# #Setting up parameters for the rpart.control gridsearch
# cp <- c(cp=c(0.00001,.0001,.005,.001))
# max_depth <- c(max_depth = round(seq(3,30,length=10),0))
# min_split <- c(min_split = round(seq(2, 100, length=30),0) + (round(seq(2, 100, length=30),0)%%2))
# min_bucket <-c(min_split/2)
#
# params <- expand.grid(cp=cp, max_depth=max_depth, min_split=min_split, min_bucket=min_bucket)
# combo_count <- nrow(params)
#
# Chunk 8
#First Tree combination
rpart_tree1 <- rpart(isSpam ~.,
data=spam_train,
na.action = na.rpart,
method = "class",
control=rpart.control(minsplit = 3,
maxdepth=30,
minbucket = 2,
cp = 0.010))
rpart.plot(rpart_tree1)
rp_predict1 <- predict(rpart_tree1,
newdata = spam_test,
type = "class")
result_1 <- make_metric_frame(rpart_tree1, rp_predict1)
result_1
#result_1 <- data.frame(t(c("depth"=get_depth(rpart_tree1),get_metrics(rp_predict1))))
#result_1
# Chunk 9
#2nd Tree combination
rpart_tree2 <- rpart(isSpam ~., data=spam_train,
na.action = na.rpart,
method = "class",
control=rpart.control(minsplit = 3,
maxdepth= 2,
minbucket = 2,
cp = 0.010))
rpart.plot(rpart_tree2)
rp_predict2 <- predict(rpart_tree2,
newdata = spam_test,
type = "class")
#result_2 <- data.frame(t(c("depth"=get_depth(rpart_tree2),get_metrics(rp_predict2))))
#result_2
result_2 <- make_metric_frame(rpart_tree2, rp_predict2)
result_2
# Chunk 10
#3rd Tree combination
rpart_tree3 <- rpart(isSpam ~., data=spam_train,
na.action = na.rpart,
method = "class",
control=rpart.control(minsplit = 3,
maxdepth=30,
minbucket = 2,
cp = 0.005))
rpart.plot(rpart_tree3)
rp_predict3 <- predict(rpart_tree3,
newdata = spam_test,
type = "class")
result_3 <- make_metric_frame(rpart_tree3, rp_predict3)
result_3
# Chunk 11
#4rd Tree combination
rpart_tree4 <- rpart(isSpam ~., data=spam_train,
na.action = na.rpart,
method = "class",
control=rpart.control(minsplit = 3,
maxdepth=2,
minbucket = 2,
cp = 0.005))
rpart.plot(rpart_tree4)
rp_predict4 <- predict(rpart_tree4,
newdata = spam_test,
type = "class")
result_4 <- make_metric_frame(rpart_tree4, rp_predict4)
result_4
# Chunk 12
#4rd Tree combination
rpart_tree5 <- rpart(isSpam ~., data=spam_train,
na.action = na.rpart,
method = "class",
control=rpart.control(minsplit = 1,
maxdepth=30,
minbucket = 1,
cp = 1e-7))
rpart.plot(rpart_tree5)
rp_predict5 <- predict(rpart_tree5,
newdata = spam_test,
type = "class")
result_5 <- make_metric_frame(rpart_tree5, rp_predict5)
result_5
